---
- name: Setup the Atmosphere API component
  hosts: atmosphere

  roles:
    - { role: app-alter-kernel-for-imaging,
        tags: ['atmosphere'] }

    - { role: app-config-postgres,
        DBNAME: "{{ ATMO_DBNAME | default(atmosphere_database_name) }}",
        DBUSER: "{{ ATMO_DBUSER | default(atmosphere_database_user) }}",
        DBPASSWORD: "{{ ATMO_DBPASSWORD | default(atmosphere_database_password) }}",
        LOAD_DATABASE: "ATMO_DATA.LOAD_DATABASE | default(False)",
        tags: ['atmosphere', 'database'] }

    - { role: app-load-data-postgres,
        DBNAME: "{{ ATMO_DBNAME | default(atmosphere_database_name) }}",
        LOAD_DATABASE: "ATMO_DATA.LOAD_DATABASE | default(False)",
        DATABASE_FILE_TO_BE_LOADED: "{{ ATMO_DATA.SQL_DUMP_FILE }}",
        when: ATMO_DATA is defined and ATMO_DATA.SQL_DUMP_FILE is defined and ATMO_DATA.LOAD_DATABASE is defined,
        tags: ['atmosphere', 'data-load'] }

    - { role: delete-files,
        LOCATION: "{{ ATMOSPHERE_LOCATION | default(atmosphere_directory_path) }}",
        GLOB: "*.pyc",
        tags: ['atmosphere'] }

    - { role: app-pip-install-requirements,
        APP_BASE_DIR: "{{ ATMOSPHERE_LOCATION | default(atmosphere_directory_path) }}",
        REQUIREMENTS_FILE_NAME: 'requirements.txt',
        USE_PIP_TOOLS_SYNC: True,
        VIRTUAL_ENV: "{{ VIRTUAL_ENV_ATMOSPHERE | default(atmosphere_virtualenv_path) }}",
        PIP_EXTRA_ARGS: '{% if faster_dev_rebuild == false %}--no-cache-dir {% endif %}--no-binary pycparser',
        tags: ['atmosphere', 'pip-install-requirements'],
        when: installation_type is not defined or installation_type != 'development'}

    - { role: app-pip-install-requirements,
        APP_BASE_DIR: "{{ ATMOSPHERE_LOCATION | default(atmosphere_directory_path) }}",
        REQUIREMENTS_FILE_NAME: 'dev_requirements.txt',
        USE_PIP_TOOLS_SYNC: True,
        VIRTUAL_ENV: "{{ VIRTUAL_ENV_ATMOSPHERE | default(atmosphere_virtualenv_path) }}",
        PIP_EXTRA_ARGS: '{% if faster_dev_rebuild == false %}--no-cache-dir {% endif %}--no-binary pycparser',
        tags: ['atmosphere', 'pip-install-requirements'],
        when: installation_type is defined and installation_type == 'development'}

    - { role: app-config-logging,
        APP_BASE_DIR: "{{ ATMOSPHERE_LOCATION | default(atmosphere_directory_path) }}",
        LOG_FILES: "{{ ATMO_LOG_FILES }}",
        tags: ['atmosphere', 'logging']}

    - { role: app-generate-ini-config,
        template_vars: "{{ ATMO }}",
        APP_BASE_DIR: "{{ ATMOSPHERE_LOCATION | default(atmosphere_directory_path) }}",
        VIRTUAL_ENV: "{{ VIRTUAL_ENV_ATMOSPHERE | default(atmosphere_virtualenv_path) }}",
        tags: ['atmosphere', 'generate-config'] }

    - { role: app-setup-ssh-keys,
        APP_BASE_DIR: "{{ ATMOSPHERE_LOCATION | default(atmosphere_directory_path) }}",
        SSH_PRIV_KEY: "{{ ID_RSA | default('') }}",
        SSH_PUB_KEY: "{{ ID_RSA_PUB | default('') }}",
        tags: ['atmosphere', 'ansible-deploy', 'setup-ssh-keys'] }

    - { role: app-install-instance-deploy-automation,
        APP_BASE_DIR: "{{ ATMOSPHERE_LOCATION | default(atmosphere_directory_path) }}",
        INSTANCE_DEPLOY_AUTOMATION_DIR: "{{ ANSIBLE_DEPLOY_LOCATION | default(atmosphere_ansible_directory_path) }}",
        INSTANCE_DEPLOY_AUTOMATION_HOSTS_FILE: "{{ ANSIBLE_HOSTS_FILE | default('') }}",
        INSTANCE_DEPLOY_AUTOMATION_GROUP_VARS_FOLDER: "{{ ANSIBLE_GROUP_VARS_FOLDER | default('') }}",
        tags: ['atmosphere', 'ansible-deploy'] }

    - { role: app-generate-ini-config,
        template_vars: "{{ ATMOSPHERE_ANSIBLE }}",
        APP_BASE_DIR: "{{ ANSIBLE_DEPLOY_LOCATION | default(atmosphere_ansible_directory_path) }}",
        VIRTUAL_ENV: "{{ VIRTUAL_ENV_ATMOSPHERE | default(atmosphere_ansible_virtualenv_path) }}",
        tags: ['atmosphere', 'ansible-deploy'] }

    - { role: app-django-manage-collectstatic,
        APP_BASE_DIR: "{{ ATMOSPHERE_LOCATION | default(atmosphere_directory_path) }}",
        VIRTUAL_ENV: "{{ VIRTUAL_ENV_ATMOSPHERE | default(atmosphere_virtualenv_path) }}",
        DJANGO_SETTINGS_MODULE: 'atmosphere.settings',
        tags: ['atmosphere', 'manage-collectstatic'] }

    - { role: app-django-manage-migrate,
        APP_BASE_DIR: "{{ ATMOSPHERE_LOCATION | default(atmosphere_directory_path) }}",
        VIRTUAL_ENV: "{{ VIRTUAL_ENV_ATMOSPHERE | default(atmosphere_virtualenv_path) }}",
        DJANGO_SETTINGS_MODULE: 'atmosphere.settings',
        tags: ['atmosphere', 'manage-migrate'] }

    - { role: app-django-manage-load-tables,
        APP_BASE_DIR: "{{ ATMOSPHERE_LOCATION | default(atmosphere_directory_path) }}",
        VIRTUAL_ENV: "{{ VIRTUAL_ENV_ATMOSPHERE | default(atmosphere_virtualenv_path) }}",
        DJANGO_SETTINGS_MODULE: 'atmosphere.settings',
        tags: ['atmosphere','manage-load-tables'] }

    - { role: create-nginx-uwsgi,
        APP_BASE_DIR: "{{ ATMOSPHERE_LOCATION | default(atmosphere_directory_path) }}",
        UWSGI_APP_NAME: 'atmosphere',
        UWSGI_INI_SRC_NAME: 'extras/uwsgi/atmo.uwsgi.ini',
        tags: ['atmosphere', 'deploy', 'create-nginx-uwsgi', 'nginx-uwsgi'] }

    - { role: setup-webserver-user-group,
        APP_BASE_DIR: "{{ ATMOSPHERE_LOCATION | default(atmosphere_directory_path) }}",
        tags: ['atmosphere','set-permissions'] }

    # The logrotate-files role must come after the setup-webserver-user-group role.
    # This is because setup-webserver-user-group sets the permissions on all files in that directory the
    # to the WEBSERVER_USER user, while logrotate requires root
    - { role: logrotate-files,
        LOGROTATE_FILES: "{{ ATMOSPHERE_LOCATION | default(atmosphere_directory_path) }}/extras/logrotate.atmosphere",
        tags: ['atmosphere', 'logrotate'] }
