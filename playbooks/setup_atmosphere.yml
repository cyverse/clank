---
- name: Setup the Atmosphere API component
  hosts: atmosphere
  roles:
    - { role: app-alter-kernel-for-imaging,
        tags: ['atmosphere', 'kernel'] }

    - { role: app-config-postgres,
        DBNAME: "{{ ATMO_DBNAME | default(atmosphere_database_name) }}",
        DBUSER: "{{ ATMO_DBUSER | default(atmosphere_database_user) }}",
        DBPASSWORD: "{{ ATMO_DBPASSWORD | default(atmosphere_database_password) }}",
        LOAD_DATABASE: "{{ ATMO_LOAD_DATABASE }}",
        tags: ['atmosphere', 'database'] }

    - { role: app-load-data-postgres,
        DBNAME: "{{ ATMO_DBNAME | default(atmosphere_database_name) }}",
        DATABASE_FILE_TO_BE_LOADED: "{{ ATMO_SQL_DUMP_FILE }}",
        when: ATMO_LOAD_DATABASE,
        tags: ['atmosphere', 'database', 'data-load'] }

    - { role: delete-files,
        LOCATION: "{{ ATMOSPHERE_LOCATION | default(atmosphere_directory_path) }}",
        GLOB: "*.pyc",
        tags: ['atmosphere'] }

    - { role: app-install-uwsgi,
        INSTALL_ENV: "{{ atmosphere_virtualenv_path }}",
        tags: "uwsgi" }

    - { role: app-pip-install-requirements,
        APP_BASE_DIR: "{{ ATMOSPHERE_LOCATION | default(atmosphere_directory_path) }}",
        REQUIREMENTS_FILE_NAME: 'requirements.txt',
        USE_PIP_TOOLS_SYNC: False,
        VIRTUAL_ENV: "{{ atmosphere_virtualenv_path }}",
        PIP_EXTRA_ARGS: '--no-binary pycparser',
        tags: ['atmosphere', 'pip-install-requirements'],
        when: not (INSTALL_DEV_REQUIREMENTS | default(False)) }

    - { role: app-pip-install-requirements,
        APP_BASE_DIR: "{{ ATMOSPHERE_LOCATION | default(atmosphere_directory_path) }}",
        REQUIREMENTS_FILE_NAME: 'dev_requirements.txt',
        USE_PIP_TOOLS_SYNC: False,
        VIRTUAL_ENV: "{{ atmosphere_virtualenv_path }}",
        PIP_EXTRA_ARGS: '--no-binary pycparser',
        tags: ['atmosphere', 'pip-install-requirements'],
        when: INSTALL_DEV_REQUIREMENTS | default(False) }

    - { role: app-config-logging,
        APP_BASE_DIR: "{{ ATMOSPHERE_LOCATION | default(atmosphere_directory_path) }}",
        LOG_FILES: "{{ ATMO_LOG_FILES }}",
        tags: ['atmosphere', 'logging']}

    - { role: app-generate-ini-config,
        template_vars: "{{ ATMO }}",
        APP_BASE_DIR: "{{ ATMOSPHERE_LOCATION | default(atmosphere_directory_path) }}",
        VIRTUAL_ENV: "{{ atmosphere_virtualenv_path }}",
        tags: ['atmosphere', 'generate-config'] }

    - { role: app-setup-ssh-keys,
        APP_BASE_DIR: "{{ ATMOSPHERE_LOCATION | default(atmosphere_directory_path) }}",
        SSH_PRIV_KEY: "{{ ID_RSA | default('') }}",
        SSH_PUB_KEY: "{{ ID_RSA_PUB | default('') }}",
        tags: ['atmosphere', 'ansible-deploy', 'setup-ssh-keys'] }

    - { role: app-install-instance-deploy-automation,
        APP_BASE_DIR: "{{ ATMOSPHERE_LOCATION | default(atmosphere_directory_path) }}",
        INSTANCE_DEPLOY_AUTOMATION_DIR: "{{ ANSIBLE_DEPLOY_LOCATION | default(atmosphere_ansible_directory_path) }}",
        INSTANCE_DEPLOY_AUTOMATION_HOSTS_FILE: "{{ ANSIBLE_HOSTS_FILE | default('') }}",
        INSTANCE_DEPLOY_AUTOMATION_GROUP_VARS_FOLDER: "{{ ANSIBLE_GROUP_VARS_FOLDER | default('') }}",
        tags: ['atmosphere', 'ansible-deploy'] }

    - { role: app-generate-ini-config,
        template_vars: "{{ ATMOSPHERE_ANSIBLE }}",
        APP_BASE_DIR: "{{ ANSIBLE_DEPLOY_LOCATION | default(atmosphere_ansible_directory_path) }}",
        VIRTUAL_ENV: "{{ atmosphere_virtualenv_path }}",
        tags: ['atmosphere', 'ansible-deploy'] }

    - { role: app-django-manage-collectstatic,
        APP_BASE_DIR: "{{ ATMOSPHERE_LOCATION | default(atmosphere_directory_path) }}",
        VIRTUAL_ENV: "{{ atmosphere_virtualenv_path }}",
        DJANGO_SETTINGS_MODULE: 'atmosphere.settings',
        tags: ['atmosphere', 'manage-collectstatic'] }

    - { role: app-django-manage-migrate,
        APP_BASE_DIR: "{{ ATMOSPHERE_LOCATION | default(atmosphere_directory_path) }}",
        VIRTUAL_ENV: "{{ atmosphere_virtualenv_path }}",
        DJANGO_SETTINGS_MODULE: 'atmosphere.settings',
        tags: ['atmosphere', 'manage-migrate'] }

    - { role: app-django-manage-load-tables,
        APP_BASE_DIR: "{{ ATMOSPHERE_LOCATION | default(atmosphere_directory_path) }}",
        VIRTUAL_ENV: "{{ atmosphere_virtualenv_path }}",
        DJANGO_SETTINGS_MODULE: 'atmosphere.settings',
        tags: ['atmosphere','manage-load-tables'] }

    - { role: setup-webserver-user-group,
        APP_BASE_DIR: "{{ ATMOSPHERE_LOCATION | default(atmosphere_directory_path) }}",
        WEBSERVER_USER: "www-data",
        tags: ['atmosphere','set-permissions'] }

    # The logrotate-files role must come after the setup-webserver-user-group role.
    # This is because setup-webserver-user-group sets the permissions on all files in that directory the
    # to the WEBSERVER_USER user, while logrotate requires root
    - { role: logrotate-files,
        LOGROTATE_FILES: "{{ ATMOSPHERE_LOCATION | default(atmosphere_directory_path) }}/extras/logrotate.atmosphere",
        tags: ['atmosphere', 'logrotate'] }
