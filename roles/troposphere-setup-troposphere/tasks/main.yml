- name: gather os specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"
    - "defaults.yml"
  tags: vars

- name: template out tropo bash aliases
  template: src=tropo_bash_aliases.j2 dest=~/.tropo_bash_aliases mode="u=rw,g=r,o=r"

- name: add aliases to ~/.bashrc
  blockinfile:
    dest: ~/.bashrc
    block: |
      if [ -f ~/.tropo_bash_aliases ]; then
        . ~/.tropo_bash_aliases
      fi
    marker: "# {mark} ANSIBLE MANAGED BLOCK tropo_bash_aliases"

- name: troposphere database is created
  become: yes
  become_user: postgres
  postgresql_db: name={{ TROPO_DBNAME }} state=present login_user=postgres
  tags:
    - postgres

- name: ensure user has access to troposphere database
  become: yes
  become_user: postgres
  postgresql_user: db={{ TROPO_DBNAME }} name={{ TROPO_DBUSER }} password={{ TROPO_DBPASSWORD }} priv=ALL
  tags:
    - postgres

- name: add troposphere user connect privileges
  become: yes
  become_user: postgres
  postgresql_user: db={{ TROPO_DBNAME }} name={{ TROPO_DBUSER }} role_attr_flags=CREATEDB,NOSUPERUSER,CREATEROLE
  tags:
    - postgres

- name: remove public connect privileges to troposphere db
  become: yes
  become_user: postgres
  command: psql -c "REVOKE connect ON DATABASE {{ TROPO_DBNAME }} FROM PUBLIC;"
  tags:
    - postgres
  register: output

- debug: var=output.stdout_lines
  when: "{{ CLANK_VERBOSE | default(False) }}"

- name: add atmo user connect privileges to troposphere db
  become: yes
  become_user: postgres
  command: psql -c "GRANT connect ON DATABASE {{ TROPO_DBNAME }} TO {{ TROPO_DBUSER }};"
  tags:
    - postgres
  register: output

- debug: var=output.stdout_lines
  when: "{{ CLANK_VERBOSE | default(False) }}"

- name: copy over troposphere sql script for postgresql to run
  copy: src={{ TROPOSPHERE_DATABASE_FILE_TO_BE_LOADED }} dest={{ POSTGRES_SQL_INSTALL_DIRECTORY }}
  when: LOAD_TROPOSPHERE_DATABASE

- name: run troposphere sql script for postgresql
  become: yes
  become_user: postgres
  command: psql -f {{ POSTGRES_SQL_INSTALL_DIRECTORY }}/{{ TROPOSPHERE_DATABASE_FILE_TO_BE_LOADED | basename }}
  when: LOAD_TROPOSPHERE_DATABASE
  register: output

- debug: var=output.stdout_lines
  when: ({{ CLANK_VERBOSE | default(False) }} and {{ LOAD_TROPOSPHERE_DATABASE }})

- name: pip install requirements
  pip: requirements={{ TROPOSPHERE_LOCATION }}/dev_requirements.txt virtualenv={{ VIRTUAL_ENV_TROPOSPHERE }}  state=latest

- name: create troposphere log directory
  file: path={{ TROPOSPHERE_LOCATION }}/logs state=directory

- name: create troposphere static directory
  file: path={{ TROPOSPHERE_LOCATION }}/troposphere/tropo-static state=directory

- name: ensure local files directory exists
  local_action: >
      file path={{ role_path }}/files state=directory mode=0755

- name: create local troposphere_variables.ini from dict
  local_action: >
      template src={{ role_path }}/templates/variables.ini.j2 dest={{ role_path }}/files/troposphere_variables.ini

- name: move over precompleted variables.ini
  copy: src=troposphere_variables.ini dest={{ TROPOSPHERE_LOCATION }}/variables.ini backup=yes

- name: run generate script for troposphere
  shell: "{{ VIRTUAL_ENV_TROPOSPHERE }}/bin/python {{ TROPOSPHERE_LOCATION }}/configure"
  register: output

- debug: var=output.stdout_lines
  when: "{{ CLANK_VERBOSE | default(False) }}"

- name: troposphere manage collectstatic
  django_manage: >
      command=collectstatic
      app_path={{ TROPOSPHERE_LOCATION }}
      settings='troposphere.settings'
      pythonpath={{ TROPOSPHERE_LOCATION }}
      virtualenv={{ VIRTUAL_ENV_TROPOSPHERE }}

- name: troposphere manage migrate
  django_manage: >
      command=migrate
      app_path={{ TROPOSPHERE_LOCATION }}
      settings='troposphere.settings'
      pythonpath={{ TROPOSPHERE_LOCATION }}
      virtualenv={{ VIRTUAL_ENV_TROPOSPHERE }}

- name: add webserver user for user and group permissions
  file: path={{ TROPOSPHERE_LOCATION }} owner={{ WEBSERVER_USER }} group={{ WEBSERVER_USER }} recurse=yes

- name: turn off apache
  service: name={{ APACHE }} state=stopped enabled=no
  failed_when: False

# nginx portion
- name: create apps-enabled directory
  file: path={{ UWISGI_APPS_ENABLED_PATH }} state=directory

- name: link troposphere uwsgi conf file
  file: src={{ TROPOSPHERE_LOCATION }}/extras/troposphere.uwsgi.ini dest={{ UWISGI_APPS_ENABLED_PATH }}/troposphere.ini state=link

- name: make uwsgi and nginx stuff
  shell: '{{ item }}'
  args:
    chdir: "{{ TROPOSPHERE_LOCATION }}/extras/nginx"
  with_items:
    - make
  register: output

- debug: var=output.stdout_lines
  when: "{{ CLANK_VERBOSE | default(False) }}"

- name: build cf2
  shell: cp -r {{ TROPOSPHERE_LOCATION }}/troposphere/static/resources {{ TROPOSPHERE_LOCATION }}/troposphere/assets/
  register: output

- debug: var=output.stdout_lines
  when: "{{ CLANK_VERBOSE | default(False) }}"

- name: remove node modules
  file: path={{ TROPOSPHERE_LOCATION }}/node_modules state=absent

- name: run npm install
  action: shell npm install
  args:
    chdir: "{{ TROPOSPHERE_LOCATION }}"
  register: result
  until: result.rc == 0
  retries: 2

- debug: var=result.stdout_lines
  when: "{{ CLANK_VERBOSE | default(False) }}"

- name: run npm build
  args:
    chdir: "{{ TROPOSPHERE_LOCATION }}"
  shell: npm run build --{{ TROPOSPHERE_BUILD | default("production")}}
  register: output

- debug: var=output.stdout_lines
  when: "{{ CLANK_VERBOSE | default(False) }}"
