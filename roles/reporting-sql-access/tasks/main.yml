---

- name: OS-Specific variables gathered
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_major_version}}.yml"
    - "{{ ansible_distribution }}.yml"

# Dependencies

- name: psycopg2 installed
  package:
    name: '{{ psycopg2_package }}'
    state: 'installed'

# SQL setup

- name: Reporting PostgreSQL role created
  postgresql_user:
    db: '{{ atmosphere_database_name }}'
    name: 'reporting'
    role_attr_flags: 'NOSUPERUSER,INHERIT,NOCREATEDB,NOCREATEROLE,NOREPLICATION'
  become: true
  become_user: 'postgres'

- name: Privileges granted to reporting PostgreSQL role
  postgresql_privs:
    database: '{{ atmosphere_database_name }}'
    grant_option: 'no'
    privs: '{{ item.privs }}'
    objs: '{{ item.objs }}'
    type: '{{ item.type }}'
    roles: 'reporting'
  with_items:
    - objs: ''
      privs: 'CONNECT'
      type: 'database'
    - objs: 'public'
      privs: 'USAGE,CREATE'
      type: 'schema'
    - objs: 'ALL_IN_SCHEMA'
      privs: 'SELECT'
      type: 'table'
    - objs: 'ALL_IN_SCHEMA'
      privs: 'SELECT'
      type: 'sequence'
  become: true
  become_user: 'postgres'

- name: Privileges revoked from reporting PostgreSQL role for sensitive tables
  postgresql_privs:
    database: '{{ atmosphere_database_name }}'
    grant_option: 'no'
    privs: 'SELECT'
    objs: 'access_token,atmosphere_user,auth_token,auth_userproxy,boot_script,credential,django_admin_log,django_cyverse_auth_accesstoken,django_cyverse_auth_token,django_cyverse_auth_userproxy,django_session,external_link,iplantauth_accesstoken,iplantauth_token,iplantauth_userproxy,node_controller,provider,provider_credential'
    type: 'table'
    state: absent
    roles: 'reporting'
  become: true
  become_user: 'postgres'

- name: Privileges granted to reporting PostgreSQL role for specific columns in tables with sensitive data
  command: 'psql {{ atmosphere_database_name }} postgres -c "{{ item }}"'
  with_items:
    - 'GRANT SELECT (id, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined, selected_identity_id, uuid, end_date) ON atmosphere_user TO reporting;'
    - 'GRANT SELECT (id, location, type_id, active, public, start_date, end_date, virtualization_id, description, auto_imaging, over_allocation_action_id, uuid, timezone, cloud_admin_id) ON provider TO reporting;'
  become: true
  become_user: 'postgres'

# Unix user

- name: Reporting user created
  user:
    name: 'reporting'
    # CyVerse convention, allows SSH access as user
    groups: 'users'
    shell: '/home/reporting/dump-db.sh'

- name: Authorized keys to SSH in and take DB dump
  authorized_key:
    user: 'reporting'
    state: 'present'
    key: '{{ item }}'
  with_items: '{{ reporting_access_ssh_keys }}'

- name: MOTD suppressed for reporting user
  file:
    path: '/home/reporting/.hushlogin'
    state: 'touch'

- name: DB dump script deployed
  template:
    src: 'dump-db.sh.j2'
    dest: '/home/reporting/dump-db.sh'
    owner: 'reporting'
    mode: 'u+x'
