# tasks file for atmosphere-install-dependencies

- name: gather os specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"
    - "defaults.yml"
  tags: vars

- name: turn off apache
  service: name={{ APACHE }} state=stopped enabled=no
  failed_when: False

- name: install initial packages packages
  action: >
    {{ ansible_pkg_mgr }} name={{ item }} state=latest update_cache=yes
  with_items: "{{ INITIAL_PACKAGES.packages }}"
  tags: install, apt-install

- name: remove old apt respositories
  apt_repository: repo={{ item }} state=absent
  with_items: "{{ APT_REPOSITORIES_TO_REMOVE.packages }}"
  when: ansible_distribution == "Ubuntu"

- name: add apt keys
  apt_key: url={{ item }} state=present
  with_items: "{{ APT_KEYS_TO_ADD.packages }}"
  when: ansible_distribution == "Ubuntu" 

- name: add apt repositories
  apt_repository: repo={{ item }} state=present
  with_items: "{{ APT_REPOSITORIES_TO_ADD.packages }}"
  when: ansible_distribution == "Ubuntu" 

- name: update cache as a separate step
  apt: update_cache=yes
  when: ansible_distribution == "Ubuntu"
  tags: apt-install

- name: install dev packages packages
  action: >
    {{ ansible_pkg_mgr }} name={{ item }} state=latest
  with_items: "{{ DEV_PACKAGES.packages }}"
  tags: install, apt-install

- name: install lib packages packages
  action: >
    {{ ansible_pkg_mgr }} name={{ item }} state=latest
  with_items: "{{ LIB_PACKAGES.packages }}"
  tags: install, apt-install

- name: install nginx packages packages
  action: >
    {{ ansible_pkg_mgr }} name={{ item }} state=latest
  with_items: "{{ NGINX_PACKAGES.packages }}"
  tags: install, apt-install

- name: pip install python packages
  pip: name={{ item }}
  with_items:
    - virtualenv
    - wheel
    - setuptools
