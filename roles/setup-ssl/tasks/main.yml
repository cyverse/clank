---

- name: gather os specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"
    - "default.yml"
  tags: vars

- name: debug create ssl
  debug: msg="CREATE_SSL_FILES={{ CREATE_SSL_FILES }}"

########################################
# Tasks related to ssl certs being given
########################################
- block:

  - include: check_parameters.yml

  - name: copy over ssl certificate
    copy: src={{ SSL_CERTIFICATE }} dest={{ SSL_LOCATION }}/certs/

  - name: copy over bundle cert
    copy: src={{ BUNDLE_CERT }} dest={{ SSL_LOCATION }}/certs/

  - name: copy over private ssl key
    copy: src={{ SSL_KEY }} dest={{ SSL_LOCATION }}/private/

  when: not CREATE_SSL_FILES

########################################
# Tasks related to ssl certs not given
########################################
- block:

  - name: Set variables as if the user had already made them available.
    set_fact:
      SSL_CERTIFICATE: "{{ SSL_LOCATION }}/certs/{{OPENSSL_SELF_SIGNED.name}}.crt"
      SSL_KEY: "{{ SSL_LOCATION }}/private/{{OPENSSL_SELF_SIGNED.name}}.key"
      BUNDLE_CERT: "{{ SSL_LOCATION }}/certs/empty_bundle.crt"
      COMBINED_CERT: "{{ SSL_LOCATION }}/certs/{{OPENSSL_SELF_SIGNED.name}}_combined.crt"

  - name: Creating self-signed server SSL cert
    command: >
      openssl req -new
        -x509
        -nodes
        -extensions v3_ca
        -days {{ item.days|default(3650) }}
        -subj "/C={{ item.country }}/ST={{ item.state }}/L={{ item.city }}/O={{ item.organization }}/OU={{ item.unit }}/emailAddress={{ item.email }}"
        -keyout {{ SSL_KEY }}
        -out {{ SSL_CERTIFICATE }}
    args:
      creates: "{{ SSL_CERTIFICATE }}"
    with_items:
      - "{{ OPENSSL_SELF_SIGNED }}"

  - name: Create empty bundle file
    file: path={{ BUNDLE_CERT }} state=touch

  - name: Create combined certificate (just SSL_CERT since bundle is empty)
    copy: src={{ SSL_CERTIFICATE }} dest={{ COMBINED_CERT }}

  when: CREATE_SSL_FILES
