- name: gather os specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"
    - "{{ ansible_os_family }}.yml"
  tags: vars

- name: template out atmo bash aliases
  template: src=atmo_bash_aliases.j2 dest=~/.atmo_bash_aliases mode="u=rw,g=r,o=r"

- name: add atmo bash aliases to ~/.bashrc
  blockinfile:
    dest: ~/.bashrc
    block: |
      if [ -f ~/.atmo_bash_aliases ]; then
        . ~/.atmo_bash_aliases
      fi
    marker: "# {mark} ANSIBLE MANAGED BLOCK atmo_bash_aliases"
    
- name: install dev packages packages
  action: >
    {{ ansible_pkg_mgr }} name={{ item }} state={{ DEV_PACKAGES.state }}
  with_items: "{{ DEV_PACKAGES.packages }}"
  tags: install, apt-install

- name: run modprobe for the first time
  modprobe: name={{ item.name }} state=present params={{ item.params }}
  with_items: "{{ MODPROBE_PACKAGES.packages }}"

- name: make sure there is an exit 0 at end of /etc/rc.local
  lineinfile: dest=/etc/rc.local insertbefore=EOF line="exit 0"

- name: add modprobe nbd for imaging to /etc/rc.local for subsequent rebooks
  lineinfile: dest=/etc/rc.local insertbefore="exit 0" line="modprobe {{ item.name }} {{ item.params | default(omit) }}"
  with_items: "{{ MODPROBE_PACKAGES.packages }}"

- name: atmosphere database is created
  postgresql_db: name={{ ATMO_DBNAME }} state=present login_user=postgres
  become: yes
  become_user: postgres
  tags:
    - postgres

- name: ensure user has access to atmosphere database
  become: yes
  become_user: postgres
  postgresql_user: db={{ ATMO_DBNAME }} name={{ ATMO_DBUSER }} password={{ ATMO_DBPASSWORD }} priv=ALL
  tags:
    - postgres

- name: add atmosphere user connect privileges
  become: yes
  become_user: postgres
  postgresql_user: db={{ ATMO_DBNAME }} name={{ ATMO_DBUSER }} role_attr_flags=CREATEDB,NOSUPERUSER,CREATEROLE
  tags:
    - postgres

- name: remove public connect privileges to atmosphere db
  become: yes
  become_user: postgres
  command: psql -c "REVOKE connect ON DATABASE {{ ATMO_DBNAME }} FROM PUBLIC;"
  tags:
    - postgres
  register: output

- debug: var=output.stdout_lines
  when: "{{ CLANK_VERBOSE | default(False) }}"

- name: add atmo user connect privileges to atmosphere db
  become: yes
  become_user: postgres
  command: psql -c "GRANT connect ON DATABASE {{ ATMO_DBNAME }} TO {{ ATMO_DBUSER }};"
  tags:
    - postgres
  register: output

- debug: var=output.stdout_lines
  when: "{{ CLANK_VERBOSE | default(False) }}"

- name: copy over atmosphere sql scripts for postgresql to run
  copy: src={{ ATMOSPHERE_DATABASE_FILE_TO_BE_LOADED }} dest={{ POSTGRES_SQL_INSTALL_DIRECTORY }}
  when: LOAD_ATMOSPHERE_DATABASE

- name: run atmosphere sql scripts for postgresql
  become: yes
  become_user: postgres
  command: psql -f {{ POSTGRES_SQL_INSTALL_DIRECTORY }}/{{ ATMOSPHERE_DATABASE_FILE_TO_BE_LOADED | basename }}
  when: LOAD_ATMOSPHERE_DATABASE
  register: output

- debug: var=output.stdout_lines
  when: ({{ CLANK_VERBOSE | default(False) }} and {{ LOAD_ATMOSPHERE_DATABASE }})

- name: pip install requirements
  pip: requirements={{ ATMOSPHERE_LOCATION }}/requirements.txt virtualenv={{ VIRTUAL_ENV_ATMOSPHERE }} extra_args='--no-cache-dir'

- name: pip install dev requirements when jenkins variable set
  pip: requirements={{ ATMOSPHERE_LOCATION }}/dev_requirements.txt virtualenv={{ VIRTUAL_ENV_ATMOSPHERE }} extra_args='--no-cache-dir'
  when: JENKINS

- name: wheel install requirements
  command: "{{ VIRTUAL_ENV_ATMOSPHERE }}/bin/wheel install-scripts celery"
  register: output

- debug: var=output.stdout_lines
  when: "{{ CLANK_VERBOSE | default(False) }}"

- name: insert ansible role path into config file
  lineinfile: dest={{ ANSIBLE_DEPLOY_LOCATION }}/ansible/ansible.cfg regexp="roles_path =" line="roles_path = {{ ANSIBLE_DEPLOY_LOCATION }}/ansible/roles"
  tags:
    - ansible-deploy

- name: ensure local files directory exists
  local_action: >
      file path={{ role_path }}/files state=directory mode=0755

- name: create local atmosphere_variables.ini from dict
  local_action: >
      template src={{ role_path }}/templates/variables.ini.j2 dest={{ role_path }}/files/atmosphere_variables.ini
  tags: variables

- name: move over precompleted variables.ini
  copy: src=atmosphere_variables.ini dest={{ ATMOSPHERE_LOCATION }}/variables.ini backup=yes
  tags: variables

- name: run generate scripts for atmosphere
  shell: "{{ VIRTUAL_ENV_ATMOSPHERE }}/bin/python {{ ATMOSPHERE_LOCATION }}/configure"
  register: output

- debug: var=output.stdout_lines
  when: "{{ CLANK_VERBOSE | default(False) }}"

- name: make ssh file directory
  file: path={{ ATMOSPHERE_LOCATION }}/extras/ssh/ state=directory

- name: move over id_rsa private key
  copy: src={{ ID_RSA }} dest={{ ATMOSPHERE_LOCATION }}/extras/ssh/

- name: move over id_rsa public key
  copy: src={{ ID_RSA_PUB }} dest={{ ATMOSPHERE_LOCATION }}/extras/ssh/

- name: move over completed hosts file
  copy: src={{ ANSIBLE_HOSTS_FILE }} dest={{ ANSIBLE_DEPLOY_LOCATION }}/ansible

- name: move over completed group_vars folder
  copy: src={{ ANSIBLE_GROUP_VARS_FOLDER }} dest={{ ANSIBLE_DEPLOY_LOCATION }}/ansible

- name: template over system's ssh config
  template: src=ssh_config dest=/root/.ssh/config backup=yes

#### DB migrations

- name: atmosphere manage migrate
  django_manage: >
      command=migrate
      app_path={{ ATMOSPHERE_LOCATION }}
      settings='atmosphere.settings'
      pythonpath={{ ATMOSPHERE_LOCATION }}
      virtualenv={{ VIRTUAL_ENV_ATMOSPHERE }}

- name: atmosphere manage load provider fixtures
  django_manage: >
      command=loaddata
      app_path={{ ATMOSPHERE_LOCATION }}
      fixtures={{ ATMOSPHERE_LOCATION }}/core/fixtures/provider.json
      settings='atmosphere.settings'
      pythonpath={{ ATMOSPHERE_LOCATION }}
      virtualenv={{ VIRTUAL_ENV_ATMOSPHERE }}

- name: atmosphere manage load quota fixtures
  django_manage: >
      command=loaddata
      app_path={{ ATMOSPHERE_LOCATION }}
      fixtures={{ ATMOSPHERE_LOCATION }}/core/fixtures/quota.json
      settings='atmosphere.settings'
      pythonpath={{ ATMOSPHERE_LOCATION }}
      virtualenv={{ VIRTUAL_ENV_ATMOSPHERE }}

- name: atmosphere manage created atmosphere cache requests table
  django_manage: >
      command=createcachetable
      cache_table="atmosphere_cache_requests"
      app_path={{ ATMOSPHERE_LOCATION }}
      settings='atmosphere.settings'
      pythonpath={{ ATMOSPHERE_LOCATION }}
      virtualenv={{ VIRTUAL_ENV_ATMOSPHERE }}

- name: atmosphere manage collectstatic
  django_manage: >
      command=collectstatic
      app_path={{ ATMOSPHERE_LOCATION }}
      settings='atmosphere.settings'
      pythonpath={{ ATMOSPHERE_LOCATION }}
      virtualenv={{ VIRTUAL_ENV_ATMOSPHERE }}
# End of Migrations

- name: create atmosphere log directory
  file: path={{ ATMOSPHERE_LOCATION }}/logs state=directory

- name: touch atmosphere.log
  file: path={{ ATMOSPHERE_LOCATION }}/logs/atmosphere.log state=touch

- name: touch atmosphere_status.log
  file: path={{ ATMOSPHERE_LOCATION }}/logs/atmosphere_status.log state=touch

- name: add webserver user for user and group permissions
  file: path={{ ATMOSPHERE_LOCATION }} owner={{ WEBSERVER_USER }} group={{ WEBSERVER_USER }} recurse=yes

- name: turn off apache
  service: name={{ APACHE }} state=stopped enabled=no
  failed_when: False

# nginx portion
- name: create apps-enabled directory
  file: path={{ UWISGI_APPS_ENABLED_PATH }} state=directory

- name: make uwsgi and nginx stuff
  shell: "{{ item }}"
  args:
    chdir: "{{ ATMOSPHERE_LOCATION }}/extras/nginx"
  with_items:
    - make
  register: output

- debug: var=output.stdout_lines
  when: "{{ CLANK_VERBOSE | default(False) }}"

- name: link uwsgi atmosphere.ini file
  file: src={{ ATMOSPHERE_LOCATION }}/extras/uwsgi/atmo.uwsgi.ini dest={{ UWISGI_APPS_ENABLED_PATH }}/atmosphere.ini state=link
